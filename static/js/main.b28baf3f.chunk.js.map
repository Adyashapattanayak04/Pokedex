{"version":3,"sources":["constants.js","Pokedex.js","Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","backgroundColor","cardMedia","margin","cardContent","textAlign","color","searchContainer","display","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokedex","props","classes","history","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","className","TextField","onChange","e","target","value","label","variant","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","Card","onClick","push","CardMedia","image","style","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","front_default","class","src","Link","href","url","typeInfo","type","generatePokemonJSX","Button","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b28baf3f.chunk.js","sourcesContent":["export const toFirstCharUppercase = name =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  CircularProgress,\r\n  Toolbar,\r\n  AppBar,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokedexContainer: {\r\n    paddingTop: \"20px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n    backgroundColor: \"black\"\r\n  },\r\n  cardMedia: {\r\n    margin: \"auto\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n    color:\"black\"\r\n  \r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Pokedex = (props) => {\r\n  const classes = useStyles();\r\n  const { history } = props;\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        const { results } = data;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, index) => {\r\n          newPokemonData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name,\r\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n              index + 1\r\n            }.png`,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n\r\n  const handleSearchChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    const { id, name, sprite } = pokemonData[pokemonId];\r\n    return (\r\n      <Grid item xs={4} key={pokemonId}>\r\n        <Card onClick={() => history.push(`/${id}`)}>\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={sprite}\r\n            style={{ width: \"130px\", height: \"130px\" }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n              className={classes.searchInput}\r\n              onChange={handleSearchChange}\r\n              label=\"Pokemon\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {pokemonData ? (\r\n        <Grid container spacing={2} className={classes.pokedexContainer}>\r\n          {Object.keys(pokemonData).map(\r\n            (pokemonId) =>\r\n              pokemonData[pokemonId].name.includes(filter) &&\r\n              getPokemonCard(pokemonId)\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokedex;","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport './App.css';\r\n\r\n\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  const generatePokemonJSX = (pokemon) => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n    return (\r\n      <>\r\n        <Typography class= \"nameid\" variant=\"h1\">\r\n          {`${id}.`} {toFirstCharUppercase(name)}\r\n          <img style={{ width: \"300px\", height: \"300px\" }} src={front_default} />\r\n        </Typography>\r\n        {/* <img style={{ width: \"300px\", height: \"300px\" }} src={ fullImageUrl } /> */}\r\n        <Typography class=\"pokeinfo\" variant=\"h3\">Pokemon Info</Typography>\r\n        <Typography class=\"details\">\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name} </Link>\r\n        </Typography>\r\n        <Typography class=\"info\">Height: {height} </Typography>\r\n        <Typography class=\"info\">Weight: {weight} </Typography>\r\n        <Typography class=\"info\" variant=\"h6\"> Types:</Typography>\r\n        <Typography class=\"info\"> {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n        \r\n          const { name } = type;\r\n          return <Typography class=\"back\" key={name}> {`${name}`}</Typography>;\r\n        })} </Typography>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n\r\n      {pokemon !== undefined && (\r\n        <Button class=\"btn\" variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n          BACK\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemon;","import React from \"react\";\nimport Pokedex from \"./Pokedex\";\nimport Pokemon from \"./Pokemon\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" render={(props) => <Pokedex {...props} />} />\n    <Route\n      exact\n      path=\"/:pokemonId\"\n      render={(props) => <Pokemon {...props} />}\n    />\n  </Switch> \n);\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}